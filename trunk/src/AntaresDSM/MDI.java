
/*
 * MDI.java
 *
 * Created on 6 de Abril de 2008, 12:01
 *
 * Copyright (C) 2008 Source Forge, Inc.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License 
 * as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public 
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 *
 * Comments only in english, portuguese, spanish or french
 * 
 * Authors: Antonio Neto <tomsalvador at users.sourceforge.net>
 */

package AntaresDSM;

import AntaresDSM.Arquivo;
import AntaresDSM.DSM;
import AntaresDSM.Grafo;
import AntaresDSM.VisualizadorMatriz;
import AntaresDSM.VisualizadorGrafo;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import java.util.Map;
import javax.crypto.NullCipher;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import prefuse.Visualization;
import prefuse.data.Graph;
import prefuse.render.DefaultRendererFactory;
import prefuse.render.LabelRenderer;


/**
 *
 * @author  Tom
 */
public class MDI extends javax.swing.JFrame {
    
    private DSM dsm;
    
    private VisualizadorMatriz janelaMatrizPre;
    private VisualizadorMatriz janelaMatrizPos;
    private VisualizadorGrafo visualizadorGrafo;
    private FrameNovo frameNovo;
    
    /** Creates new form MDI */
    public MDI() {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
        
        //Setando o Icone do Frame Principal
        try{
            this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Antares.gif")));
        } catch(Exception e) {}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Código Gerado ">//GEN-BEGIN:initComponents
    private void initComponents() {
        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        novoItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        DSMMenu = new javax.swing.JMenu();
        ParticionarMenuItem = new javax.swing.JMenuItem();
        CiclosItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Antares DSM");

        fileMenu.setText("Arquivo");
        fileMenu.setName("fileMenu");
        novoItem.setText("Novo...");
        novoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                novoItemActionPerformed(evt);
            }
        });

        fileMenu.add(novoItem);

        openMenuItem.setLabel("Abrir...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        saveMenuItem.setEnabled(false);
        saveMenuItem.setLabel("Salvar...");
        saveMenuItem.setName("salvar");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveMenuItem);

        exitMenuItem.setText("Sair");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        DSMMenu.setText("DSM");
        DSMMenu.setName("DSMMenu");
        ParticionarMenuItem.setText("Particionar");
        ParticionarMenuItem.setEnabled(false);
        ParticionarMenuItem.setName("particionar");
        ParticionarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParticionarMenuItemActionPerformed(evt);
            }
        });

        DSMMenu.add(ParticionarMenuItem);

        CiclosItem.setText("Identificar ciclos");
        CiclosItem.setEnabled(false);
        CiclosItem.setName("ciclos");
        CiclosItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CiclosItemActionPerformed(evt);
            }
        });

        DSMMenu.add(CiclosItem);

        menuBar.add(DSMMenu);

        helpMenu.setText("Ajuda");
        aboutMenuItem.setLabel("Sobre...");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
// TODO adicione seu código de manipulação aqui:
        About about;
        
        about = new About();
        about.setModal(true);
        about.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void novoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_novoItemActionPerformed
// TODO adicione seu código de manipulação aqui:
        frameNovo = new FrameNovo();
        frameNovo.setDsm(dsm);
        frameNovo.setModal(true);
        frameNovo.setVisible(true);
        
        dsm = frameNovo.getDsm();
        
        exibeDSM();
    }//GEN-LAST:event_novoItemActionPerformed

    private void CiclosItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CiclosItemActionPerformed
// TODO adicione seu código de manipulação aqui:
    String valorCelula;
    ArrayList<String> elemPassados; 
    
        for (int j = dsm.getNdeVertices() - 1; j > 0; j--) {
            for (int i = j - 1; i > 0; i--) {
                if( dsm.getmatrizDependenciasCalculada()[i][j]>0 ){ //Tem dependência
                    elemPassados = new ArrayList<String>();
                    if(dsm.identificarCiclosElem(i,j, elemPassados) == true){
                        //Identificador de ciclo
                        janelaMatrizPos.getTableDSM().setValueAt( 
                                ((String)janelaMatrizPos.getTableDSM().getValueAt(i,j)).concat(" ")  , i, j );
                    }
                }
            }
        }
    }//GEN-LAST:event_CiclosItemActionPerformed

    private void ParticionarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParticionarMenuItemActionPerformed
    // TODO adicione seu código de manipulação aqui:
            janelaMatrizPos = new VisualizadorMatriz();
            desktopPane.add(janelaMatrizPos);
            janelaMatrizPos. setVisible(true);
            
            janelaMatrizPos.setDsm(dsm);
            janelaMatrizPos.criaMatrizCalculada();
            
            
            for (int i = 0; i < menuBar.getMenuCount(); i++) {
                if(menuBar.getMenu(i).getName() == "DSMMenu"){
                    for (int j = 0; j < menuBar.getMenu(i).getItemCount(); j++) {
                        if(menuBar.getMenu(i).getItem(j).getName() == "particionar"){
                            menuBar.getMenu(i).getItem(j).setEnabled(true);
                        }
                        if(menuBar.getMenu(i).getItem(j).getName() == "ciclos"){
                            menuBar.getMenu(i).getItem(j).setEnabled(true);
                        }
                    }
                }
                if(menuBar.getMenu(i).getName() == "fileMenu"){
                    for (int j = 0; j < menuBar.getMenu(i).getItemCount(); j++) {
                        if(menuBar.getMenu(i).getItem(j).getName() == "salvar"){
                            menuBar.getMenu(i).getItem(j).setEnabled(true);
                        }
                    }
                }
            }
    }//GEN-LAST:event_ParticionarMenuItemActionPerformed

    private ArrayList<String> montaArquivoSaida(){
        ArrayList<String> listaString= new ArrayList<String>();
        String linha;
        
        for (int i = 1; i < dsm.getNdeVertices(); i++) {
            linha = janelaMatrizPos.getTableDSM().getValueAt(i,0).toString();
            linha = linha.substring(linha.indexOf(" ") + 1);
            linha = String.valueOf(i).concat(" ").concat(linha);
            listaString.add(linha);
        }
        listaString.add("dep");
        for (int i = 1; i < dsm.getNdeVertices(); i++) {
            for (int j = 1; j < dsm.getNdeVertices(); j++) {
                if(janelaMatrizPos.getTableDSM().getValueAt(i,j)!= null){
                    if(!janelaMatrizPos.getTableDSM().getValueAt(i,j).toString().trim().isEmpty()){
                        linha = String.valueOf(i);
                        linha = linha.concat(" ".concat(String.valueOf(j)));
                        
                        try {
                            Integer.parseInt(janelaMatrizPos.getTableDSM().getValueAt(i,j).toString().trim());
                            linha = linha.concat(" ".concat(janelaMatrizPos.getTableDSM().getValueAt(i,j).toString().trim()));
                        } catch (Exception e) {
                            
                        }
                        listaString.add(linha);

                    }
                }
            }
        }
        
        return listaString;
    }
    
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
// TODO adicione seu código de manipulação aqui:
        String caminho;
        JFileChooser chooser;
        Arquivo arquivo = new Arquivo();
        ArrayList<String> listaString= new ArrayList<String>();
        
	    	
        chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Salvar DSM");
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.addChoosableFileFilter(new FileFilter() {
            public boolean accept(File f) {
                String filename = f.getName();
                return filename.endsWith(".dsm") || f.isDirectory();
            }
            public String getDescription() {
                return "Arquivos DSM";
            }
        });
        
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) { 
            caminho = chooser.getSelectedFile().getPath();
            if(!caminho.contains(".dsm")){
                caminho = caminho.concat(".dsm");
            }

            arquivo.escreveArquivo(montaArquivoSaida(), caminho);
            
            abrirArquivo(caminho);
        }
        
        
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
       // TODO adicione seu código de manipulação aqui:
        String caminho;
        JFileChooser chooser;
        
        ArrayList<String> listaString= new ArrayList<String>();
        
	    	
        chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Arquivo de entrada");
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.addChoosableFileFilter(new FileFilter() {
            public boolean accept(File f) {
                String filename = f.getName();
                return filename.endsWith(".dsm") || f.isDirectory();
            }
            public String getDescription() {
                return "Arquivos DSM";
            }
        });

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            caminho = chooser.getSelectedFile().getPath();
            abrirArquivo(caminho);
        }
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void abrirArquivo(String caminho){
        Arquivo arquivo = new Arquivo();
        ArrayList<String> listaString;
        
        arquivo.leArquivo(caminho);
        listaString = arquivo.getArquivoLido();
        

        try{
            dsm = new DSM(listaString);
        } catch (Exception e){
            JOptionPane.showMessageDialog(null,"O arquivo de entrada é inválido! Erro: ".concat(e.getMessage()),"Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
     
        exibeDSM();
    }

    private void exibeDSM(){
        
        desktopPane.removeAll();
        
        //Cria o XML
        new Grafo("grafo.xml", dsm);
        //Cria a Visualização Apontando o XML criado
        visualizadorGrafo = new VisualizadorGrafo("grafo.xml");
        desktopPane.add(visualizadorGrafo.getFrame());
        
        janelaMatrizPre = new VisualizadorMatriz();
        desktopPane.add(janelaMatrizPre);
        janelaMatrizPre. setVisible(true);
        
        janelaMatrizPre.setDsm(dsm);
        janelaMatrizPre.criaMatriz();
        
        for (int i = 0; i < menuBar.getMenuCount(); i++) {
            if(menuBar.getMenu(i).getName() == "DSMMenu"){
                for (int j = 0; j < menuBar.getMenu(i).getItemCount(); j++) {
                    if(menuBar.getMenu(i).getItem(j).getName() == "particionar"){
                        menuBar.getMenu(i).getItem(j).setEnabled(true);
                    }
                    if(menuBar.getMenu(i).getItem(j).getName() == "ciclos"){
                        menuBar.getMenu(i).getItem(j).setEnabled(false);
                    }
                }
            }
            if(menuBar.getMenu(i).getName() == "fileMenu"){
                for (int j = 0; j < menuBar.getMenu(i).getItemCount(); j++) {
                    if(menuBar.getMenu(i).getItem(j).getName() == "salvar"){
                        menuBar.getMenu(i).getItem(j).setEnabled(false);
                    }
                }
            }
        }
         
        desktopPane.repaint();
    }

        
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {   
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");   
        } catch (Exception e) {   
        }
        

        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MDI().setVisible(true);
            }
        });
    }
    
    // Declaração de variáveis - não modifique//GEN-BEGIN:variables
    private javax.swing.JMenuItem CiclosItem;
    private javax.swing.JMenu DSMMenu;
    private javax.swing.JMenuItem ParticionarMenuItem;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem novoItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // Fim da declaração de variáveis//GEN-END:variables
    
}
