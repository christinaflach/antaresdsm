/*
 * MatrizDependenciasPre.java
 *
 * Created on 21 de Abril de 2008, 13:40
 *
 * Copyright (C) 2008 Source Forge, Inc.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License 
 * as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public 
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 *
 * Comments only in english, portuguese, spanish or french
 * 
 * Authors: Antonio Neto <tomsalvador at users.sourceforge.net>
 */

package AntaresDSM;

import java.awt.Color;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author  Tom
 */
public class MatrixVisualizator extends javax.swing.JInternalFrame {
    private JTable tableDSM ;
    private JScrollPane scrollPanel;
    private DSM dsm;
    private TableCellRenderer renderer;
    
    /** Creates new form MatrizDependenciasPre */
    public MatrixVisualizator() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Initial DSM");
        setName("matrixPre"); // NOI18N
        setNormalBounds(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 488, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 473, Short.MAX_VALUE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-500)/2, (screenSize.height-500)/2, 500, 500);
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MatrixVisualizator().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public DSM getDsm() {
        return dsm;
    }

    public void setDsm(DSM dsm) {
        this.dsm = dsm;
    }
    
    public void createMatrix(){
        int sizeX, sizeY;
        

        tableDSM = new JTable(dsm.getVertexNumber(), dsm.getVertexNumber());
        tableDSM.setTableHeader(null);

        renderer = new ColorRenderer();
        
        tableDSM.setEnabled(false);
        
        //Fills header
        for (int i = 0; i < dsm.getVertexList().size(); i++) {
            tableDSM.setValueAt(Integer.toString(i + 1).concat(" ".concat(dsm.getVertexList().get(i))), i+1 , 0);
            tableDSM.setValueAt(Integer.toString(i + 1), 0 , i+1);
        }
        
       
        //Fills dependencies
        for (int i = 1; i < dsm.getVertexNumber(); i++) {
            for (int j = 1; j < dsm.getVertexNumber(); j++) {
                if(dsm.getDependencyMatrix()[i][j] > 0  && i!=j){
                    tableDSM.setValueAt(Integer.toString(dsm.getDependencyMatrix()[i][j]), i , j);
                }
            }
        }
        
        tableDSM.setRowHeight(20);
        
        //Calculate the size of the matrix
        sizeX = dsm.getVertexNumber()*20 + 200;
        sizeY = dsm.getVertexNumber()*20 + 5;//dsm.getVertexNumber();
        
        tableDSM.setBounds(20,20,sizeX,sizeY);
        tableDSM.getColumnModel().getColumn(0).setPreferredWidth(200);
        
        for (int i = 1; i < dsm.getVertexNumber(); i++) {
            tableDSM.getColumnModel().getColumn(i).setPreferredWidth(20);
        }
        
        tableDSM.setDefaultRenderer(Object.class, renderer);
        tableDSM.setAutoResizeMode(tableDSM.AUTO_RESIZE_OFF);
        
        scrollPanel = new JScrollPane(tableDSM);
        
        scrollPanel.setVisible(true);  
        scrollPanel.getViewport().setBackground(Color.WHITE);
        
        scrollPanel.setBorder(null);
        this.setContentPane(scrollPanel);
        
        //Window's attributes
        setTitle("Initial DSM");
        setBounds(600, 0, 600, 500);
    }
    
    public void createCalculatedMatrix(){
        int sizeX, sizeY;
        
        dsm.QuickTriangularMatrix();

        tableDSM = new JTable(dsm.getVertexNumber(), dsm.getVertexNumber());
        tableDSM.setTableHeader(null);

        renderer = new ColorRenderer();
        
        tableDSM.setEnabled(true);
        
        //Fills header
        for (int i = 0; i < dsm.getVertexList().size(); i++) {
            tableDSM.setValueAt(Integer.toString(dsm.getCalculatedDependencyMatrix()[i+1][0]).
                    concat(" ".concat(dsm.getVertexList().get(dsm.getCalculatedDependencyMatrix()[i+1][0] - 1))), i+1 , 0);
            tableDSM.setValueAt(Integer.toString(dsm.getCalculatedDependencyMatrix()[i+1][0]), 0 , i+1);
        }
        
       
        //Fills dependencies
        for (int i = 1; i < dsm.getVertexNumber(); i++) {
            for (int j = 1; j < dsm.getVertexNumber(); j++) {
                if(dsm.getCalculatedDependencyMatrix()[i][j] > 0  && i!=j){
                    tableDSM.setValueAt(Integer.toString(dsm.getCalculatedDependencyMatrix()[i][j]), i , j);
                }
            }
        }
        
        tableDSM.setRowHeight(20);
        
        //Calculate the size that the matrix will have
        sizeX = dsm.getVertexNumber()*20 + 200;
        sizeY = dsm.getVertexNumber()*20 + 5;//dsm.getVertexNumber();
        
        tableDSM.setBounds(20,20,sizeX,sizeY);
        tableDSM.getColumnModel().getColumn(0).setPreferredWidth(200);
        
        for (int i = 1; i < dsm.getVertexNumber(); i++) {
            tableDSM.getColumnModel().getColumn(i).setPreferredWidth(20);
        }
        
        tableDSM.setDefaultRenderer(Object.class, renderer);
        tableDSM.setAutoResizeMode(tableDSM.AUTO_RESIZE_OFF);
        
        scrollPanel = new JScrollPane(tableDSM);
        
        scrollPanel.setVisible(true);  
        scrollPanel.getViewport().setBackground(Color.WHITE);
        
        scrollPanel.setBorder(null);
        this.setContentPane(scrollPanel);
        
        //Window's attributes
        setTitle("Calculated DSM");
        setBounds(600, 500, 600, 500);
        
    }

    public JTable getTableDSM() {
        return tableDSM;
    }

    public void setTableDSM(JTable tableDSM) {
        this.tableDSM = tableDSM;
    }

    
}
