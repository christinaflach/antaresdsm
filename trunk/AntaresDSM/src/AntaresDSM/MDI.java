
/*
 * MDI.java
 *
 * Created on 6 de Abril de 2008, 12:01
 *
 * Copyright (C) 2008 Source Forge, Inc.
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License 
 * as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public 
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 *
 * Comments only in english, portuguese, spanish or french
 * 
 * Authors: Antonio Neto <tomsalvador at users.sourceforge.net>
 */

package AntaresDSM;

import java.awt.Toolkit;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;


/**
 *
 * @author  Tom
 */
public class MDI extends javax.swing.JFrame {
    
    private DSM dsm;
    
    private MatrixVisualizator matrixWindowPre;
    private MatrixVisualizator matrixWindowPos;
    private GraphVisualizator graphVisualizator;
    private NewFrame newFrame;
    
    /** Creates new form MDI */
    public MDI() {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
        
        //Seting the icon of the main frame
        try{
            this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Antares.gif")));
        } catch(Exception e) {}
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        DSMMenu = new javax.swing.JMenu();
        PartitioningMenuItem = new javax.swing.JMenuItem();
        CyclesItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Antares DSM");

        fileMenu.setText("File");
        fileMenu.setName("fileMenu"); // NOI18N

        newItem.setText("New...");
        newItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newItemActionPerformed(evt);
            }
        });
        fileMenu.add(newItem);

        openMenuItem.setText("Open...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setText("Save...");
        saveMenuItem.setEnabled(false);
        saveMenuItem.setName("save"); // NOI18N
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        DSMMenu.setText("DSM");
        DSMMenu.setName("DSMMenu"); // NOI18N

        PartitioningMenuItem.setText("Partitioning");
        PartitioningMenuItem.setEnabled(false);
        PartitioningMenuItem.setName("partitioning"); // NOI18N
        PartitioningMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PartitioningMenuItemActionPerformed(evt);
            }
        });
        DSMMenu.add(PartitioningMenuItem);

        CyclesItem.setText("Identify cycles");
        CyclesItem.setEnabled(false);
        CyclesItem.setName("cycles"); // NOI18N
        CyclesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CyclesItemActionPerformed(evt);
            }
        });
        DSMMenu.add(CyclesItem);

        menuBar.add(DSMMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About...");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
    // TODO add manipulation code here:
        About about;
        
        about = new About();
        about.setModal(true);
        about.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void newItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newItemActionPerformed
    // TODO add manipulation code here:
        newFrame = new NewFrame();
        newFrame.setDsm(dsm);
        newFrame.setModal(true);
        newFrame.setVisible(true);
        
        dsm = newFrame.getDsm();
        
        displaysDSM();
    }//GEN-LAST:event_newItemActionPerformed

    private void CyclesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CyclesItemActionPerformed
    // TODO add manipulation code here:
    List<String> pastElements;
    
        for (int j = dsm.getVertexNumber() - 1; j > 0; j--) {
            for (int i = j - 1; i > 0; i--) {
                if( dsm.getCalculatedDependencyMatrix()[i][j]>0 ){ //Tem dependï¿½ncia
                    pastElements = new ArrayList<String>();
                    if(dsm.indetifyCycles(i,j, pastElements) == true){
                        //Cycle identificator
                        matrixWindowPos.getTableDSM().setValueAt(
                                ((String)matrixWindowPos.getTableDSM().getValueAt(i,j)).concat(" ")  , i, j );
                    }
                }
            }
        }
    }//GEN-LAST:event_CyclesItemActionPerformed

    private void PartitioningMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PartitioningMenuItemActionPerformed
    // TODO add manipulation code here:
            matrixWindowPos = new MatrixVisualizator();
            desktopPane.add(matrixWindowPos);
            matrixWindowPos. setVisible(true);
            
            matrixWindowPos.setDsm(dsm);
            matrixWindowPos.createCalculatedMatrix();
            
            
            for (int i = 0; i < menuBar.getMenuCount(); i++) {
                if(menuBar.getMenu(i).getName() == null ? "DSMMenu" == null : menuBar.getMenu(i).getName().equals("DSMMenu")){
                    for (int j = 0; j < menuBar.getMenu(i).getItemCount(); j++) {
                        if(menuBar.getMenu(i).getItem(j).getName() == null ? "partitioning" == null : menuBar.getMenu(i).getItem(j).getName().equals("partitioning")){
                            menuBar.getMenu(i).getItem(j).setEnabled(true);
                        }
                        if(menuBar.getMenu(i).getItem(j).getName() == null ? "cycles" == null : menuBar.getMenu(i).getItem(j).getName().equals("cycles")){
                            menuBar.getMenu(i).getItem(j).setEnabled(true);
                        }
                    }
                }
                if(menuBar.getMenu(i).getName() == null ? "fileMenu" == null : menuBar.getMenu(i).getName().equals("fileMenu")){
                    for (int j = 0; j < menuBar.getMenu(i).getItemCount(); j++) {
                        if(menuBar.getMenu(i).getItem(j).getName() == null ? "save" == null : menuBar.getMenu(i).getItem(j).getName().equals("save")){
                            menuBar.getMenu(i).getItem(j).setEnabled(true);
                        }
                    }
                }
            }
    }//GEN-LAST:event_PartitioningMenuItemActionPerformed

    private List<String> buildOutputFile(){
        List<String> stringList= new ArrayList<String>();
        String line;
        
        for (int i = 1; i < dsm.getVertexNumber(); i++) {
            line = matrixWindowPos.getTableDSM().getValueAt(i,0).toString();
            line = line.substring(line.indexOf(" ") + 1);
            line = String.valueOf(i).concat(" ").concat(line);
            stringList.add(line);
        }
        stringList.add("dep");
        for (int i = 1; i < dsm.getVertexNumber(); i++) {
            for (int j = 1; j < dsm.getVertexNumber(); j++) {
                if(matrixWindowPos.getTableDSM().getValueAt(i,j)!= null){
                    if(!matrixWindowPos.getTableDSM().getValueAt(i,j).toString().trim().isEmpty()){
                        line = String.valueOf(i);
                        line = line.concat(" ".concat(String.valueOf(j)));
                        
                        try {
                            Integer.parseInt(matrixWindowPos.getTableDSM().getValueAt(i,j).toString().trim());
                            line = line.concat(" ".concat(matrixWindowPos.getTableDSM().getValueAt(i,j).toString().trim()));
                        } catch (Exception e) {
                            
                        }
                        stringList.add(line);

                    }
                }
            }
        }
        
        return stringList;
    }
    
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
    // TODO add manipulation code here:
        String path;
        JFileChooser chooser;
        FileManipulator file = new FileManipulator();
	    	
        chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Save DSM");
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.addChoosableFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                String filename = f.getName();
                return filename.endsWith(".dsm") || f.isDirectory();
            }
            @Override
            public String getDescription() {
                return "DSM Files";
            }
        });
        
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) { 
            path = chooser.getSelectedFile().getPath();
            if(!path.contains(".dsm")){
                path = path.concat(".dsm");
            }

            file.writeFile(buildOutputFile(), path);
            
            openFile(path);
        }
        
        
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
       // TODO add manipulation code here:
        String path;
        JFileChooser chooser;   
	    	
        chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Input File");
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        chooser.addChoosableFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                String filename = f.getName();
                return filename.endsWith(".dsm") || f.isDirectory();
            }
            @Override
            public String getDescription() {
                return "DSM Files";
            }
        });

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
            path = chooser.getSelectedFile().getPath();
            openFile(path);
        }
        
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void openFile(String caminho){
        FileManipulator file = new FileManipulator();
        List<String> stringList;
        
        file.readFile(caminho);
        stringList = file.getAlreadyReadFile();
        
        try{
            dsm = new DSM(stringList);
        } catch (Exception e){
            JOptionPane.showMessageDialog(null,"Input file is not valid! Error: ".concat(e.getMessage()),"Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
     
        displaysDSM();
    }

    private void displaysDSM(){
        
        desktopPane.removeAll();
        
        //Creates the XML
        new Graph("graph.xml", dsm);
        //Creates the visualization and point it to the created XML
        graphVisualizator = new GraphVisualizator("graph.xml");
        desktopPane.add(graphVisualizator.getFrame());
        
        matrixWindowPre = new MatrixVisualizator();
        desktopPane.add(matrixWindowPre);
        matrixWindowPre. setVisible(true);
        
        matrixWindowPre.setDsm(dsm);
        matrixWindowPre.createMatrix();
        
        for (int i = 0; i < menuBar.getMenuCount(); i++) {
            if(menuBar.getMenu(i).getName() == null ? "DSMMenu" == null : menuBar.getMenu(i).getName().equals("DSMMenu")){
                for (int j = 0; j < menuBar.getMenu(i).getItemCount(); j++) {
                    if(menuBar.getMenu(i).getItem(j).getName() == null ? "partitioning" == null : menuBar.getMenu(i).getItem(j).getName().equals("partitioning")){
                        menuBar.getMenu(i).getItem(j).setEnabled(true);
                    }
                    if(menuBar.getMenu(i).getItem(j).getName() == null ? "cycles" == null : menuBar.getMenu(i).getItem(j).getName().equals("cycles")){
                        menuBar.getMenu(i).getItem(j).setEnabled(false);
                    }
                }
            }
            if(menuBar.getMenu(i).getName() == null ? "fileMenu" == null : menuBar.getMenu(i).getName().equals("fileMenu")){
                for (int j = 0; j < menuBar.getMenu(i).getItemCount(); j++) {
                    if(menuBar.getMenu(i).getItem(j).getName() == null ? "save" == null : menuBar.getMenu(i).getItem(j).getName().equals("save")){
                        menuBar.getMenu(i).getItem(j).setEnabled(false);
                    }
                }
            }
        }
         
        desktopPane.repaint();
    }

        
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {   
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");   
        } catch (Exception e) {   
        }
        

        
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MDI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CyclesItem;
    private javax.swing.JMenu DSMMenu;
    private javax.swing.JMenuItem PartitioningMenuItem;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables
    
}
